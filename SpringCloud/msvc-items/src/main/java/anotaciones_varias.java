/*
  Feign es una herramienta que te permite hacer llamadas HTTP a otros servicios de forma muy simple y declarativa, como si estuvieras llamando un mÃ©todo de Java. Es sÃºper Ãºtil en arquitecturas de microservicios, donde un servicio necesita comunicarse con otro.

ğŸ“¦ Â¿QuÃ© es Feign?
Feign es un cliente HTTP declarativo. Lo provee Spring Cloud OpenFeign y bÃ¡sicamente te permite escribir una interfaz en Java, anotar mÃ©todos, y listo: Spring se encarga de hacer la llamada HTTP por vos.

ğŸ§  Â¿CÃ³mo funciona?
ImaginÃ¡ que tenÃ©s dos microservicios:

Servicio A: necesita info de productos.

Servicio B: tiene un endpoint /productos.

Con Feign, en el Servicio A creÃ¡s una interfaz que representa a Servicio B. No escribÃ­s lÃ³gica HTTP, ni RestTemplate, ni WebClient.



Â¿QuÃ© es Spring WebFlux?
Es la alternativa reactiva a Spring MVC. Usa un modelo asÃ­ncrono y no bloqueante, ideal para apps que manejan muchas peticiones concurrentes (como APIs que escalan mucho, servidores de streaming, etc).

Usa internamente Project Reactor, que es una librerÃ­a basada en el paradigma reactivo con los tipos principales: Mono y Flux.

ğŸš€ Â¿QuÃ© significa "reactivo"?
En vez de que tu cÃ³digo bloquee un hilo mientras espera una respuesta (como en Spring MVC), en WebFlux no se bloquea nada. Se registran callbacks y el hilo queda libre hasta que haya una respuesta.

âœ… MÃ¡s rendimiento con menos recursos
âœ… Perfecto para microservicios o I/O intensivo
â›” MÃ¡s complejo de leer/depurar si venÃ­s del mundo sÃ­ncrono

ğŸ”„ ComparaciÃ³n rÃ¡pida
Aspecto	Spring MVC	Spring WebFlux
Modelo	SÃ­ncrono (bloqueante)	AsÃ­ncrono (no bloqueante)
LibrerÃ­a	Servlet API	Project Reactor
Hilos por request	1 hilo por request	1 hilo puede manejar miles
Tipos devueltos	ResponseEntity, List	Mono, Flux
Escalabilidad	Limitada por hilos	Alta
  
QuÃ© es Spring Cloud LoadBalancer?
Es una herramienta de balanceo de carga (load balancing) cliente-side incluida en Spring Cloud.

Es decir: permite que tu microservicio cliente elija de forma automÃ¡tica a quÃ© instancia de otro microservicio conectarse, cuando hay varias disponibles.

ğŸ§  Â¿Para quÃ© sirve?
Cuando trabajÃ¡s con microservicios, es muy comÃºn tener varias instancias de un servicio (por ejemplo, para repartir la carga o tolerancia a fallos).

En vez de conectarte a una IP fija o a un solo host, el LoadBalancer elige dinÃ¡micamente una instancia de entre varias, como por ejemplo:

rust
Copiar
Editar
cliente -> producto-1
cliente -> producto-2
cliente -> producto-3
ğŸ§° Â¿QuÃ© reemplaza?
Antes se usaba Ribbon (de Netflix), pero ya estÃ¡ deprecated. Ahora Spring recomienda usar:

âœ… spring-cloud-loadbalancer

ğŸ”„ Â¿CÃ³mo funciona?
Cuando usÃ¡s Feign Client, WebClient o RestTemplate anotado con @LoadBalanced, el cliente consulta el Service Discovery (como Eureka, Consul, etc.) y elige una instancia disponible.

Â¿QuÃ© hace Spring Cloud LoadBalancer por vos?
Elige una instancia automÃ¡ticamente (por defecto usa Round-Robin).

Se integra con Eureka, Consul o incluso sin Discovery (definiendo las instancias manualmente).

Se usa por detrÃ¡s en Feign, WebClient, RestTemplate (si lo anotÃ¡s con @LoadBalanced).


 */
